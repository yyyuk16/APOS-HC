
<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
  <title>APOS-HC 調査票 - フォーム3</title>
  <link rel="stylesheet" href="main.css">
  <style>
    /* セクション表示の修正 */
    .section { 
      display: block !important; 
    }
    
    /* iPad用の追加スタイル */
    @media screen and (min-width: 768px) {
      body {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        font-size: 16px;
        line-height: 1.5;
      }
      
      .container {
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        padding: 25px;
        margin: 15px 0;
      }
      
      h1 {
        font-size: 1.8em;
        color: #2c3e50;
        text-align: center;
        margin-bottom: 25px;
        border-bottom: 2px solid #3498db;
        padding-bottom: 15px;
      }
      
      h2 {
        font-size: 1.4em;
        color: #34495e;
        margin: 25px 0 15px 0;
        padding: 10px 0;
        border-left: 4px solid #3498db;
        padding-left: 15px;
        background: linear-gradient(90deg, #f8f9fa 0%, transparent 100%);
      }
      
      fieldset {
        border: 2px solid #e0e6ed;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 15px;
        background: #fafbfc;
        transition: all 0.3s ease;
      }
      
      fieldset:hover {
        border-color: #3498db;
        box-shadow: 0 2px 10px rgba(52, 152, 219, 0.1);
      }
      
      legend {
        font-size: 1.1em;
        font-weight: bold;
        color: #2c3e50;
        padding: 0 10px;
        background: #fff;
        border-radius: 6px;
        border: 2px solid #3498db;
      }
      
      label {
        display: block;
        margin: 10px 0 5px 0;
        font-weight: 600;
        color: #34495e;
        font-size: 1em;
      }
      
      input[type="text"], input[type="tel"], input[type="email"], 
      input[type="number"], select, textarea {
        width: 100%;
        padding: 10px 12px;
        font-size: 1em;
        border: 2px solid #e0e6ed;
        border-radius: 6px;
        background: #fff;
        transition: all 0.3s ease;
        box-sizing: border-box;
        margin-top: 5px;
      }
      
      input:focus, select:focus, textarea:focus {
        outline: none;
        border-color: #3498db;
        box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
        transform: translateY(-2px);
      }
      
      textarea {
        resize: vertical;
        min-height: 80px;
        font-family: inherit;
      }
      
      .daily-rhythm-table {
        width: 100%;
        border-collapse: collapse;
        margin: 15px 0;
        background: #fff;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 10px rgba(0,0,0,0.08);
      }
      
      .daily-rhythm-table th {
        background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
        color: white;
        padding: 12px 10px;
        font-size: 1em;
        font-weight: bold;
        text-align: center;
      }
      
      .daily-rhythm-table td {
        padding: 10px;
        border-bottom: 1px solid #e8f4f8;
        text-align: center;
        vertical-align: middle;
      }
      
      .daily-rhythm-table td:first-child {
        background: #f8f9fa;
        font-weight: 600;
        color: #2c3e50;
        font-size: 0.9em;
        width: 150px;
      }
      
      .daily-rhythm-table input {
        width: 100%;
        padding: 8px 10px;
        font-size: 0.9em;
        border: 2px solid #e0e6ed;
        border-radius: 6px;
        background: #fff;
        transition: all 0.3s ease;
        margin: 0;
      }
      
      .daily-rhythm-table input:focus {
        border-color: #3498db;
        box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
      }
      
      .daily-rhythm-table tr:hover {
        background: #f8f9fa;
      }
      
      .note {
        font-size: 0.9em;
        color: #7f8c8d;
        margin-top: 10px;
        padding: 10px;
        background: #ecf0f1;
        border-radius: 6px;
        border-left: 3px solid #95a5a6;
      }
      
      .nav-buttons {
        margin-top: 25px;
        display: flex;
        justify-content: space-between;
        gap: 15px;
      }
      
      .nav-buttons button {
        padding: 12px 25px;
        font-size: 1em;
        font-weight: 600;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        min-width: 120px;
      }
      
      .nav-buttons button:first-child {
        background: linear-gradient(135deg, #95a5a6 0%, #7f8c8d 100%);
        color: white;
      }
      
      .nav-buttons button:last-child {
        background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
        color: white;
      }
      
      .nav-buttons button:hover {
        transform: translateY(-3px);
        box-shadow: 0 5px 20px rgba(0,0,0,0.2);
      }
      
      .nav-buttons button:active {
        transform: translateY(-1px);
      }
      
      /* プログレスバーのスタイル */
      .progress-container {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        background: #fff;
        border-top: 1px solid #e0e0e0;
        padding: 20px;
        z-index: 1000;
      }
      
      .progress-wrapper {
        max-width: 800px;
        margin: 0 auto;
      }
      
      .progress-bar {
        width: 100%;
        height: 6px;
        background: #f0f0f0;
        border-radius: 3px;
        overflow: hidden;
        margin-bottom: 15px;
      }
      
      .progress-fill {
        height: 100%;
        background: #003366;
        border-radius: 3px;
        transition: width 0.5s ease;
        width: 55%;
      }
      
      .progress-info {
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 1.1em;
        color: #333;
        font-weight: 500;
      }
      
      .progress-page {
        color: #003366;
        font-weight: 600;
      }
      
      .progress-total {
        color: #999;
      }
      
      /* フォームの下部に余白を追加（プログレスバーの分） */
      body {
        padding-bottom: 100px;
      }
    }
    
    /* タブレット用の追加調整 */
    @media screen and (max-width: 1024px) and (min-width: 768px) {
      .daily-rhythm-table td:first-child {
        width: 140px;
      }
      
      .daily-rhythm-table input {
        font-size: 0.85em;
        padding: 6px 8px;
      }
    }
  </style>
</head>
<body>

<div class="container">
<h1>APOS-HC 調査票</h1>
<form id="surveyForm">
<div class="section" id="section-lifestyle-habits">
  <fieldset>
    <legend>3.コミュニケーション・会話・聴覚</legend>
  
 
    <td>１．コミュニケーションの方法（複数選択可）</td>
    <td>
          <div id="nutrition_self_management_checkbox_group" style="display:flex; flex-direction:column; gap:2px; margin-bottom:4px;">
            <label><input type="checkbox" name="nutrition_self_management[]" value="a"> a．会話（音声）</label>
            <label><input type="checkbox" name="nutrition_self_management[]" value="b"> b．身振り</label>
            <label><input type="checkbox" name="nutrition_self_management[]" value="c"> c．表情/アイコンタクト</label>
            <label><input type="checkbox" name="nutrition_self_management[]" value="d"> d．文字盤</label>
            <label><input type="checkbox" name="nutrition_self_management[]" value="e"> e．筆談・絵文字・イラスト</label>
            <label><input type="checkbox" name="nutrition_self_management[]" value="f"> f．手話・点字・サイン</label>
            <label><input type="checkbox" name="nutrition_self_management[]" value="g"> g．パソコン,聴覚障害者用通信装置,携帯（携帯会話補助器）</label>
            <label><input type="checkbox" name="nutrition_self_management[]" value="h"> h．翻訳付きビデオ通話システム</label>
            <label>
              <input type="checkbox" name="nutrition_self_management[]" value="i" id="nutrition_self_management_other_chk"> i．通訳つき会話等その他：
            </label>
          </div>
          <input type="text" name="nutrition_self_management_other" id="nutrition_self_management_other" style="display:none; margin-top:8px; width:96%;" placeholder="内容を記入してください">
          <script>
            document.getElementById('nutrition_self_management').addEventListener('change', function() {
              var otherInput = document.getElementById('nutrition_self_management_other');
              if (this.value === 'i') {
                otherInput.style.display = 'block';
              } else {
                otherInput.style.display = 'none';
                otherInput.value = '';
              }
            });
          </script>
        </td>
      </tr>
      <tr>
        <td>2. コミュニケーション（意思疎通）の程度</td>
        <td>
          <select name="communication_level" id="communication_level" required>
            <option value="">選択してください</option>
            <option value="0">0．本人に合った方法で、日常生活のコミュニケーションが上手にとれている（会話・筆談・手話・点字・通訳・パソコン・携帯会話補助機・その他）</option>
            <option value="1">1．ゆっくりとおだやかに話せば自分の意思を伝えられる、相手の意思を理解できる</option>
            <option value="2">2．自分の意思を伝えづらい、相手の意思をあまり理解できない</option>
            <option value="3">3．言葉や非言語・感情の読み取り等全て伝えられない、相手の意思も全く理解できない</option>
          </select>
        </td>
      </tr>
      <tr>
        <tr>
            <td>3. 会話の程度</td><br>
            <td>
              <select name="conversation_level" id="conversation_level" required>
                <option value="">選択してください</option>
                <option value="0">0．明瞭に会話する／発語する</option>
                <option value="1">1．低声会話はでき、相手に伝わっているが、時々言葉を忘れる</option>
                <option value="2">2．会話がつながらず途切れる、会話内容が伝わりにくい／言語障害がある</option>
                <option value="3">3．会話が全くできない／発語・発話ができない</option>
              </select>
            </td>
          </tr>
          <tr>
            <br>
        <td>4. 聴覚の程度・耳からの聞こえ</td><br>
        <td>
          <select name="hearing_level" id="hearing_level" required>
            <option value="">選択してください</option>
            <option value="0">0．よく聞き取れている。補聴器等を適切に使用し、よく聞き取れている</option>
            <option value="1">1．会話で聞き間違えがある。少し疲れたり、小声の会話に、聞き取り難さを感じる</option>
            <option value="2">2．テレビの音がかなりうるさい。耳元で大声で聞こえる。補聴器を使わない</option>
            <option value="3">3．耳元でかなり大声が何とか聞こえるが、聞き分けられない。ほとんど聞こえない</option>
            <option value="4">4．全く聞こえない</option>
          </select>
        </td>
      </tr>
      <tr>
    </tr>

    </table>
  </fieldset>
</div>




<div class="section" id="section-lifestyle-habits">
    <fieldset>
      <legend>4.日常の意思の伝達</legend>
    
          <td>1. 日常意思を伝えられるか</td>
          <td>
            <select name="communication_level" id="communication_level" required>
              <option value="">選択してください</option>
              <option value="0">0．相手に明確に自分の意思を伝えることができる</option>
              <option value="1">1．何度か説明すれば伝えることができる。多少の困難があるが、応対に時間がかかる</option>
              <option value="2">2．時々伝えられるが、基本的には食事やトイレなど日常的な要求や意思の伝えられる</option>
              <option value="3">3．全く意思の伝達はできない、限られた仕草のみ理解できるサインがある</option>
            </select>
          </td>
        <tr>
          <td>2. 日常の判断力・対人調和力</td>
          <td>
            <select name="daily_judgement" id="daily_judgement" required>
              <option value="">選択してください</option>
              <option value="0">0．色々な事態や問題変化に直面しても、理にかなった判断ができ、特に手に負えないことはない</option>
              <option value="1">1．新しい事態や問題の環境変化に直面した時に混乱する、耳を傾けられない</option>
              <option value="2">2．落ち着かず、人に助けてもらわないと判断や耳を塞ぎがち/たらされすぎ頑張る</option>
              <option value="3">3．支離滅裂な状態で全く判断できない・全く話を受け止められない</option>
            </select>
          </td>
        <tr>
          <td>3. せん妄の兆候（複数選択可）<br></td>
          <td>
            <select name="delirium_signs_exist" id="delirium_signs_exist" required>
              <option value="">選択してください</option>
              <option value="0">0. なし</option>
              <option value="1">1. あり</option>
            </select>
            <div id="delirium_signs_detail" style="display:none; margin-top:0.5em;">
              <div style="display: flex; flex-direction: column; gap: 4px;">
                <label><input type="checkbox" name="delirium_signs[]" value="a"> a. 集中力が持ちている、注意力散漫</label>
                <label><input type="checkbox" name="delirium_signs[]" value="b"> b. 周囲の環境に対する認識が変化しやすい</label>
                <label><input type="checkbox" name="delirium_signs[]" value="c"> c. 支離滅裂な会話がある</label>
                <label><input type="checkbox" name="delirium_signs[]" value="d"> d. 運動性の落ち着きのなさや無気力がある</label>
                <label><input type="checkbox" name="delirium_signs[]" value="e"> e. 認知能力が1日の中で変化する</label>
              </div>
            </div>
            <script>
              document.addEventListener('DOMContentLoaded', function() {
                var select = document.getElementById('delirium_signs_exist');
                var detailDiv = document.getElementById('delirium_signs_detail');
                var checkboxes = detailDiv.querySelectorAll('input[type="checkbox"]');
                select.addEventListener('change', function() {
                  if (select.value === '1') {
                    detailDiv.style.display = 'block';
                  } else {
                    detailDiv.style.display = 'none';
                    // チェックボックスの選択解除
                    checkboxes.forEach(function(c){ c.checked = false; });
                  }
                });
                // ページロード時の初期値
                if (select.value === '1') {
                  detailDiv.style.display = 'block';
                } else {
                  detailDiv.style.display = 'none';
                }
              });
            </script>
          </td>
        </tr>
        <tr>
      </tr>
  
      </table>
    </fieldset>
  </div>
  


  
<div class="section" id="section-lifestyle-habits">
    <fieldset>
      <legend>5.視力・視覚</legend>
    
          <td>1. 視力の程度（コンタクトレンズ・メガネ使用可）</td>
          <td>
            <select name="visual_ability" id="visual_ability" required>
              <option value="">選択してください</option>
              <option value="0">0．日常の新聞・雑誌・パソコン・携帯等の文字読みができる</option>
              <option value="1">1．大きな文字のみ読める</option>
              <option value="2">2．処方に限界があり文字が読めないが、周辺の映像はわかる</option>
              <option value="3">3．ほとんど見えない</option>
            </select>
          </td>
        <tr><br>
          <td>2. 視覚の状態（ありの場合、複数選択可）</td><br>
          <td>
            <select name="visual_condition" id="visual_condition" required>
              <option value="">選択してください</option>
              <option value="0">0. 異常なし</option>
              <option value="1">1. あり</option>
            </select>
            <div id="visual_condition_detail" style="margin-top:0.5em; display:none;">
              <label><input type="checkbox" name="visual_condition_detail[]" value="a">a. 見える範囲が限定されている（うっすら見える～全く見えない）</label><br>
              <label><input type="checkbox" name="visual_condition_detail[]" value="b">b. 形の識別がつきにくい・視界の一部が欠ける・ゆがんでいる・中心だけが見える</label><br>
              <label><input type="checkbox" name="visual_condition_detail[]" value="c">c. 光がまぶしく目を閉じてしまう</label><br>
              <label><input type="checkbox" name="visual_condition_detail[]" value="d">d. 強い色の識別ができない、特定の色だけが見えない</label><br>
              <label><input type="checkbox" name="visual_condition_detail[]" value="e">e. 眩しいと物が見えづらい、薄暗いと明るく見える</label>
            </div>
          </td>
          <script>
            document.addEventListener('DOMContentLoaded', function() {
              var select = document.getElementById('visual_condition');
              var detailDiv = document.getElementById('visual_condition_detail');
              select.addEventListener('change', function() {
                if (select.value === '1') {
                  detailDiv.style.display = 'block';
                } else {
                  detailDiv.style.display = 'none';
                  // ラジオボタンの選択解除
                  var radios = detailDiv.querySelectorAll('input[type="radio"]');
                  radios.forEach(function(radio) {
                    radio.checked = false;
                  });
                }
              });
            });
          </script>
        <tr>
      </tr>
  
      </table>
    </fieldset>
  </div>
  
    <div class="nav-buttons">
      <button type="button" onclick="location.href='form9.html'">← 戻る</button>
      <button type="button" onclick="location.href='form11.html'">次へ →</button>
    </div>
  </form>
</div>

<script>
  // 高額費用の利用：理由欄表示
  function toggleExpensiveCostDetail() {
    const val = document.getElementById('expensive_cost_usage').value;
    const reasonDiv = document.getElementById('expensive_cost_reason');
    if (val === '2a' || val === '2b') {
      reasonDiv.style.display = 'block';
    } else {
      reasonDiv.style.display = 'none';
    }
  }
  
  // 公費医療の利用：理由欄表示
  function togglePublicMedicalReason() {
    const val = document.getElementById('public_medical_usage').value;
    const reasonDiv = document.getElementById('public_medical_reason');
    if (val === '2') {
      reasonDiv.style.display = 'block';
    } else {
      reasonDiv.style.display = 'none';
    }
  }
  
  // 公費医療の詳細：病名入力欄表示
  function toggleMedicalDiseaseInput() {
    const val = document.getElementById('public_medical_detail').value;
    const inputDiv = document.getElementById('medical_disease_input');
    if (val === '5' || val === '3') {
      inputDiv.style.display = 'block';
    } else {
      inputDiv.style.display = 'none';
    }
  }
  
  // 公費制度の利用：理由欄表示
  function togglePublicSystemReason() {
    const val = document.getElementById('public_system_usage').value;
    const reasonDiv = document.getElementById('public_system_reason');
    if (val === '2') {
      reasonDiv.style.display = 'block';
    } else {
      reasonDiv.style.display = 'none';
    }
  }
  
  // 公費制度の詳細：詳細入力欄表示
  function toggleSystemDetailInput() {
    const val = document.getElementById('public_system_detail').value;
    const inputDiv = document.getElementById('system_detail_input');
    if (val === '1' || val === '2') {
      inputDiv.style.display = 'block';
    } else {
      inputDiv.style.display = 'none';
    }
  }

  // フォームの自動保存機能
  const form = document.getElementById('surveyForm');
  form.addEventListener('input', () => {
    const data = Object.fromEntries(new FormData(form));
    localStorage.setItem('surveyData_form2', JSON.stringify(data));
  });

  // 保存されたデータの復元
  window.addEventListener('load', () => {
    const saved = localStorage.getItem('surveyData_form2');
    if (saved) {
      const data = JSON.parse(saved);
      Object.keys(data).forEach(key => {
        const el = form.elements[key];
        if (el) {
          el.value = data[key];
        }
      });
    }
  });
</script>

  <!-- プログレスバー -->
  <div class="progress-container">
    <div class="progress-wrapper">
      <div class="progress-bar">
        <div class="progress-fill" id="progressFill"></div>
      </div>
      <div class="progress-info">
        <span class="progress-page" id="currentPage">11</span>
        <span class="progress-total">/ 20</span>
      </div>
    </div>
  </div>

  <script>
    // プログレスバーの更新
    function updateProgress() {
      const progressPercentage = (11 / 20) * 100;
      const progressFill = document.getElementById('progressFill');
      const currentPageElement = document.getElementById('currentPage');
      
      progressFill.style.width = progressPercentage + '%';
      currentPageElement.textContent = '11';
      progressFill.style.background = '#003366';
    }
    
    // 初期プログレス更新
    document.addEventListener('DOMContentLoaded', function() {
      updateProgress();
      
      // フォームの自動保存機能
      const form = document.getElementById('surveyForm');
      const formNumber = 10;
      
      if (form) {
        function collectFormData() {
          const formData = new FormData(form);
          const data = {};
          for (let [key, value] of formData.entries()) {
            if (data[key]) {
              if (Array.isArray(data[key])) {
                data[key].push(value);
              } else {
                data[key] = [data[key], value];
              }
            } else {
              data[key] = value;
            }
          }
          const canvases = form.querySelectorAll('canvas');
          canvases.forEach((canvas, index) => {
            try {
              const canvasId = canvas.id || `canvas_${index}`;
              data[canvasId + '_image'] = canvas.toDataURL('image/png');
            } catch (e) {
              console.error('Canvas保存エラー:', e);
            }
          });
          const allInputs = form.querySelectorAll('input, select, textarea');
          allInputs.forEach(input => {
            if (!input.name) return;
            const isProcessed = data.hasOwnProperty(input.name);
            if (input.type === 'checkbox') {
              if (input.checked) {
                if (!data[input.name]) data[input.name] = [];
                if (Array.isArray(data[input.name])) {
                  if (!data[input.name].includes(input.value)) data[input.name].push(input.value);
                } else {
                  data[input.name] = [data[input.name], input.value];
                }
              }
            } else if (input.type === 'radio') {
              if (input.checked && !isProcessed) data[input.name] = input.value;
            } else {
              if (!isProcessed && input.value) data[input.name] = input.value;
            }
          });
          return data;
        }
        
        form.addEventListener('input', function() {
          const data = collectFormData();
          localStorage.setItem(`surveyData_form${formNumber}`, JSON.stringify(data));
          console.log(`Form ${formNumber} データを自動保存しました`);
        });
        
        form.addEventListener('change', function() {
          const data = collectFormData();
          localStorage.setItem(`surveyData_form${formNumber}`, JSON.stringify(data));
          console.log(`Form ${formNumber} データを自動保存しました`);
        });
        
        const savedData = localStorage.getItem(`surveyData_form${formNumber}`);
        if (savedData) {
          const data = JSON.parse(savedData);
          Object.keys(data).forEach(key => {
            const elements = form.elements[key];
            if (elements) {
              if (elements.length > 1) {
                Array.from(elements).forEach(el => {
                  if (el.type === 'checkbox' || el.type === 'radio') {
                    if (Array.isArray(data[key])) {
                      el.checked = data[key].includes(el.value);
                    } else {
                      el.checked = el.value === data[key];
                    }
                  }
                });
              } else if (elements.length === 1) {
                const el = elements[0];
                if (el.type === 'checkbox' || el.type === 'radio') {
                  if (Array.isArray(data[key])) {
                    el.checked = data[key].includes(el.value);
                  } else {
                    el.checked = el.value === data[key];
                  }
                } else {
                  el.value = data[key] || '';
                }
              } else {
                if (elements.type === 'checkbox' || elements.type === 'radio') {
                  if (Array.isArray(data[key])) {
                    elements.checked = data[key].includes(elements.value);
                  } else {
                    elements.checked = elements.value === data[key];
                  }
                } else {
                  elements.value = data[key] || '';
                }
              }
            }
          });
          console.log(`Form ${formNumber} の保存データを復元しました`);
        }
      }
    });
  </script>

</body>
</html>



